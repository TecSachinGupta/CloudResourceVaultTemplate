name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10']
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -e .
          
      - name: Run pytest
        run: pytest tests/unit/ --cov=src/ --cov-report=xml
        
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          
  integration-tests:
    needs: unit-tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    strategy:
      matrix:
        provider: ['azure', 'aws', 'gcp']
        
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -e .
          
      - name: Setup provider credentials
        run: |
          echo "Setting up ${{ matrix.provider }} credentials"
          if [ "${{ matrix.provider }}" == "azure" ]; then
            echo "${{ secrets.AZURE_CREDENTIALS }}" > azure-credentials.json
            export AZURE_CREDENTIALS_PATH="azure-credentials.json"
          elif [ "${{ matrix.provider }}" == "aws" ]; then
            echo "${{ secrets.AWS_ACCESS_KEY_ID }}" > aws_access_key_id.txt
            echo "${{ secrets.AWS_SECRET_ACCESS_KEY }}" > aws_secret_access_key.txt
            export AWS_ACCESS_KEY_ID=$(cat aws_access_key_id.txt)
            export AWS_SECRET_ACCESS_KEY=$(cat aws_secret_access_key.txt)
          elif [ "${{ matrix.provider }}" == "gcp" ]; then
            echo "${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}" > gcp-service-account.json
            export GOOGLE_APPLICATION_CREDENTIALS="gcp-service-account.json"
          fi
        
      - name: Run integration tests
        run: pytest tests/integration/${{ matrix.provider }}/ -v